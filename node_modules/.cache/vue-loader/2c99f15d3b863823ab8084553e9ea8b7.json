{"remainingRequest":"/home/runner/work/U2_Expresion_Oral_Escrita/U2_Expresion_Oral_Escrita/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Expresion_Oral_Escrita/U2_Expresion_Oral_Escrita/src/views/curso/Tema2.vue?vue&type=template&id=516ef28f&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Expresion_Oral_Escrita/U2_Expresion_Oral_Escrita/src/views/curso/Tema2.vue","mtime":1743994329904},{"path":"/home/runner/work/U2_Expresion_Oral_Escrita/U2_Expresion_Oral_Escrita/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Expresion_Oral_Escrita/U2_Expresion_Oral_Escrita/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Expresion_Oral_Escrita/U2_Expresion_Oral_Escrita/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Expresion_Oral_Escrita/U2_Expresion_Oral_Escrita/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Expresion_Oral_Escrita/U2_Expresion_Oral_Escrita/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}